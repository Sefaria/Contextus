sandbox: "false"
contentSandbox: "false"
deployEnv: production
previousServicesCount: "3"
restore:
  enabled: true
  bucket: sefaria-contextus-backup
  tarball: jmc-private_dump_21.09.22.tar
  serviceAccount: database-backup-read
backup:
  mongo:
    enabled: true
    prefix: ""
    public: true
    bucket: sefaria-contextus-backup
    archiveBucket: sefaria-contextus-archive
    serviceAccount: database-backup-write
  postgres:
    enabled: true
    version: 10.3
    prefix: ""
    bucket: sefaria-contextus-user-backup
    serviceAccount: database-backup-write
  sitemaps:
    enabled: true
    bucket: sefaria-contextus-sitemaps
web:
  containerImage:
    imageRegistry:
    tag:
  replicaCount: 1
  resources:
    web:
      gunicornWorkerCount: 5
      gunicornThreadCount: 5
      resources:
        requests:
          memory: "12Gi"
          cpu: "1500m"
        limits:
          memory: "14Gi"
          cpu: "2"
  secrets:
    googleClient:
      ref: google-client-secret
linker:
  enabled: false
  containerImage:
    imageRegistry:
    tag:
redis:
  containerImage:
    imageRegistry: redis
    tag: latest
  resources:
    requests:
      memory: "500Mi"
      cpu: "100m"
    limits:
      memory: "1500Mi"
      cpu: "200m"
nodejs:
  containerImage:
    imageRegistry:
    tag:
  replicaCount: 2
  resources:
    requests:
      memory: "1Gi"
      cpu: "1"
    limits:
      memory: "1500Mi"
      cpu: "1500m"
varnish:
  logging: {}
  replicaCount: 1
  resources:
    requests:
      memory: "17Gi"
      cpu: "1"
    limits:
      memory: "18Gi"
      cpu: "1500m"
  tuning:
    malloc: "14440m"
    nuke_limit: "400"
    thread_pools: 2
    thread_pool_max: 5000
    thread_pool_min: 100
    first_byte_timeout: 60  # Default 60s
    between_bytes_timeout: 60  # Default 60s
  secrets:
    varnish:
      ref: varnish-secret-production
  monitoring:
    enabled: true
ingress:
  hosts:
    - host: "contextus.org"
      path: /*
      serviceName: nginx
      port: 80
    - host: "www.contextus.org"
      path: /*
      serviceName: nginx
      port: 80
    - host: "prod.contextus.org"
      path: /*
      serviceName: nginx
      port: 80
    - host: "rollout.contextus.org"
      path: /*
      serviceName: nginx
      port: 80
  secrets:
    originTls:
      ref: origin-tls
nginx:
  containerImage:
    imageRegistry:
    tag:
  SEARCH_HOST: contextus-es-http.elasticsearch.svc
  replicaCount: 2
  resources:
    requests:
      memory: "200Mi"
      cpu: "100m"
    limits:
      memory: "300Mi"
      cpu: "150m"
monitor:
  containerImage:
    imageRegistry:
    tag:
  replicaCount: 1
  resources:
    requests:
      memory: "300Mi"
      cpu: "50m"
    limits:
      memory: "400Mi"
      cpu: "100m"
cronJobs:
  regenerate:
    enabled: false
secrets:
  localSettings:
    ref: local-settings-secrets-production
  backupManager:
    ref: backup-manager-secret-production
  slackWebhook:
    ref: slack-webhook-production
instrumentation:
  enabled: false
  otelEndpoint: "http://otel-collector-collector.monitoring:4317"
  jaegerEndpoint: "jaeger-agent-dev.monitoring.svc.cluster.local:6831"
localSettings:
  DEBUG: false
  DOMAIN_LANGUAGE: {
    "https://contextus.org": "english",
  }
  MONGO_HOST: "mongo"
  APSCHEDULER_NAME: "apscheduler-{{ .Values.deployEnv }}"
  SEARCH_ADMIN: "http://contextus-es-http.elasticsearch.svc:9200"
  TURN_SERVER: ''
  USE_CLOUDFLARE: false
  FRONT_END_URL:  "http://contextus.org"
  OFFLINE: false
  DOWN_FOR_MAINTENANCE: false
  MAINTENANCE_MESSAGE: "Contextus is down for scheduled maintenance. We expect to be back online within 15 minutes. Thank you for your patience."
  GLOBAL_WARNING: false
  GLOBAL_WARNING_MESSAGE: "Contextus will be in <b>Read-Only</b> mode for scheduled maintenance from 4:45pm-6:45pm Pacific time. Edits will <b>not</b> be saved during that time."
  SITE_PACKAGE: "sites.s4d"
  SEARCH_HOST: contextus-es-http.elasticsearch.svc
  DEFAULT_FROM_EMAIL: "Contextus <hello@contextus.org>"
  SERVER_EMAIL: "dev@contextus.org"
  MULTISERVER_ENABLED: "False"

